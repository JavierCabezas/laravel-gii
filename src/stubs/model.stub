<?php

namespace {{model_namespace}};

use {{base_model_class_name}};


/**
 * Class {{base_model_class}}Model
 * @package {{model_namespace}}
 */
class {{base_model_class}}Model extends {{base_model_class}}
{

    /**
     * Paging list + support retrieval
     *
     * @param $params
     * @param int $perPage
     * @return mixed
     */
    public static function getListPaging($params, $perPage = 10)
    {
        $cond = self::filterParams($params);
        
        return self::where($cond)->orderBy('updated_at','DESC')->paginate($perPage);
    }


    /**
     * Full list + support search
     *
     * @param $params
     * @return mixed
     */
    public static function getList($params)
    {
        $cond = self::filterParams($params);

        return self::where($cond)->get();
    }

    /**
     * Get details + support array format
     *
     * @param $id
     * @param bool $isArr
     * @return mixed
     */
    public static function getDetailById($id, $isArr = true)
    {
        $info = self::find($id);
        if ($isArr) {
            $info = $info->toArray();
        }

        return $info;
    }

    /**
     * Delete records based on primary key
     *
     * @param $id
     * @return mixed
     */
    public static function deleteById($id)
    {
        return self::destroy($id);
    }


    /**
     * Batch Delete
     *
     * @param array $ids
     * @return int
     */
    public static function batchDelete(array $ids)
    {
        return self::destroy($ids);
    }

    /**
     * Create+Edit
     *
     * @param $params
     * @return array
     */
    public static function handleSave($params)
    {
        $params = self::filterParams($params);

        $keyName = (new self())->getKeyName();

        // Historical data
        if (isset($params[$keyName]) && $obj = self::find($params[$keyName])) {
            $params = array_merge($obj->toArray(), $params);
        } else {
            // Create new entry
            $obj = new self();
        }

        foreach ($params as $k => $v) {
            if (isset($params[$k])) {
                $obj->$k = $v;
            }
        }

        return $obj->save() ? $obj->toArray() : [];
    }

    /**
     * Filter null fields and non-attr fields
     *
     * @param $params
     * @return array
     */
    private static function filterParams($params)
    {

        $ins     = (new self);
        $keyName = $ins->getKeyName();
        $attrs   = $ins->getAttributes();


        $cond = [];

        if (is_array($params) && $params) {
            // Primary Key Special Handling
            if (isset($params[$keyName]) && $params[$keyName]) {
                $cond[$keyName] = $params[$keyName];
            }
            foreach ($params as $k => $v) {
                if (isset($attrs[$k])) {
                    $cond[$k] = $v;
                }
            }
        }

        return $cond;
    }
}